//La fonction est comme un blender, on r√®gle la vitesse de rotation : param√®tre pour le mettre √† un certain niveau de 1 √† 6 : argument 
func blender (vitesse: Int) {
  print("Blender r√©gl√© sur la vitesse \(vitesse)")
}

blender (vitesse : 30)

// Exemple 2 : 

func squareFinder (number : Int) {
  
Print ("the result is \(number * number)")
}
squareFinder (number : 3)

//3 

func squareFinder (number : Int) -> Int {
  return number * number 
}

let result = squareFinder ( number : 9)
print(result)

// Dans le cas o√π on souhaite r√©utiliser le r√©sultat de notre fonction, on utilise la formulation avec retrun. 
// La premi√®re formulation ne sert qu'afficher dans la console. 
// number est le param√®tre

func sayHello (to name : String){
  print("Hello, \(name)!")
}
sayHello (to: "Bibi")

//Pour rendre la formulation plus humaine et fluide. 
//Pourquoi dans la fonction Print() on n'utilise pas le nom du param√®tre comme suit : 
prin(message : "Hello") 

// On peut avoir le m√™me comportement en utilisant underscore devant le nom du param√®tre

func saluer (_person: String) {
  print("Hello \(person)!")
}
saluer("Taylor")

// La fonction print affiche du texte et saute la ligne. On peut modifier ce comportement en modifiant un param√®tre par d√©faut appel√© "terminator". 
// Nos fonctions peuvent √©galement avoir des param√®tre par d√©faut qui font que la fonction agit d'une certaine fa√ßon tant qu'on a rien sp√©cifi√© dans la fonction. 
// Exemple : 

func saluerPerson (_ nom : String, gentillement : Bool = false) {
  if gentillement == false {
print ("Bonjour \(nom)")
  } else 
  {
    print ("Bonjour \(nom) üòä")
  }
}

saluerPerson ("Bibi")
saluerPerson ("Bibi", gentillement : true)

//Version plus compacte en utilisant un op√©rateur ternaire  : 

func saluerPerson(_ nom: String, gentillement: Bool = false) {
    let message = gentillement ? "Bonjour \(nom) üòä" : "Bonjour \(nom)"
    print(message)
}

// Certaines fonctions sont "Variadic" car elles peuvent contenir plusieurs param√®tres du m√™me type
// print est une fonction variadic car elle peut afficher plusieur param√®tres de type "String"

//Exemple : 

func squareFinder (numbers : Int...) {
for number in numbers {
print ("le carr√© de \(number) est \(number * number)")
}
}
squareFinder (numbers : 3, 6,9)

//Int...  signifie que je peux passer autant d'entiers que je veux (c‚Äôest un param√®tre variadique).
